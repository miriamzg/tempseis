c*************************************************************************
c
c	Program NA  - sampling a parameter space
c		      using a Neighbourhood algorithm
c
c	Input files:
c		    na.in	- Options for Neighbourhood algorithm
c		    sobol.in	- initializing data for quasi-random sequences
c
c	Output files:
c		    na.sum	- summary of results
c		    na.nad	- NAD (NA direct access file of models)
c
c	Comments:
c		 The NAD file is a direct access compact format file
c		 containing all models generated by the neighbourhood
c		 algorithm. (NAD files can be read in by multi-dimensional 
c		 integration program NAMI.)
c
c					M. Sambridge, April 1998 (RSES, ANU)
c
c*************************************************************************
c
	program NA
c
        include 'na.param'
c
c						Set up all dimensions for 
c						arrays used by NA routines
c
	real*4		misfit(nmod_max),
     &			misfitval,mfitmin,
     &                  mfitmean,mfitminc

c
	real*4		na_models(nd_max*nmod_max),
     &			ranges(2,nd_max),
     &			rangest(2,nd_max),
     &			del(nd_max),
     &			scales(nd_max+1),
     &			na_model(nd_max),
     &			xcur(nd_max)

        character       header(nh_max)

      	integer		mbfit(nsample_max)

      	real		work_NA1(naxis_max),
     &  		work_NA2(nmod_max),
     &  		work_NA3(naxis_max),
     &  		work_NA4(nd_max*nsample_max*nsleep_max),
     &  		work_NA5(nmod_max)

      	integer		iwork_NA1(nmod_max*nd_max),
     &  		iwork_NA2(nmod_max*nd_max),
     &  		iwork_NA3(naxis_max),
     &  		iwork_NA4(nmod_max),
     &  		iwork_NA5(nsample_max),
     &  		iwork_NA6(naxis_max)

c
	logical		monte,
     &                  verbose,
     &                  timing,
     &                  debug,
     &                  check,
     &                  errorstop,
     &                  rankmode,
     &                  expon,
     &                  shrink,
     &                  restartNA,
     &                  calcmovement
	logical		mimic_nnaxis
c
c						Some bookeeping variables
c						not used by NA routines
c	real		acells(nit_max)
c
c						Set dimensions for 
c						arrays used by narfi
c
	real*4		model_opt(nd_max)
c
c						Info and Logical unit common 
c						blocks used by NA routines
c
        common /NA_IO/lu_na,lu_out,lu_sum,lu_det,lu_sob,lu_dis,
     &                verbose,debug,timing
        common /NA_info/nxsave,ndsave,ndc,nerr,ithin,ncald,nupd,
     &                  cells,torder,taxis,tup,tcd,tdev,tna,tres
        common /NA_info_special/taxis2

        common /NA_debug/mimic_nnaxis

c
c		Set up logical units 
c						LU's for standard input and 
c						output
        lu_in  = 5
        lu_out = 6
c
c
c	       	Set up logical units for Neighbourhood Algorithm files
c 
c						LU for input of NA options
c
	lu_na = 7
c						LU for input of quasi random
c						number generator data
c						(sobol sequence data)
 	lu_sob = 10
c						LU for output of information
c						summarising NA performance. 
        lu_sum = 8
c						LU for output of sample 
c						density in best voronoi cell
c						(Only used if calcmovement
c						 is set to true and NA_PDF
c						 is not used)
 	lu_dis = 50
c						
c						Open NA input files
c
	open(lu_na,file='na.in',status='old')
        open(lu_sob,file='sobol.in',status='old')
c
c                                               Open NA output files
c
        open(lu_sum, file='na.sum', status='unknown')

c						write header to standard out
	write(*,100)
c
c						Setup for forward modelling
c
	call forward_init(nd,ranges,scales)

c
c						Read in options for
c						Neighbourhood algorithm.
c
	call NA_options
     &       (nsample_max, nit_max, naxis_max, nmod_max,
     &        nsleep_max, nsamplei,nsample,nsleep,ncells,
     &        naxis,itmax,monte,shrink,nclean)
c						set other info or debug options
	rankmode = .false.
	expon = .false.
        check = .true.
        check = .false.
        errorstop = .false.
        calcmovement = .true.
        calcmovement = .false.
	mimic_nnaxis = .false.
	mimic_nnaxis = .true.
        if(calcmovement)then
	  open(lu_dis, file='distances', status='unknown')
        end if
c
c						Initialize NA routines.
c
      	call NA_initialize
     &       (ranges,rangest,scales,
     &        nd,nd_max,naxis,del,xcur,ncells,restartNA)

        close(lu_sob)

        if(monte)then
c             		                	Generate initial population 
c						of models using a 
c						uniform random distribution
c
 	   call NA_random
     &          (na_models,nd,rangest,
     &           0,nsamplei,calcmovement)

	else
c             		                	Generate initial population 
c						of models using a 
c						Sobol-Antonov-Saleev sequence. 
c
 	   call NA_initial_sample
     &          (na_models,nd,rangest,nsamplei)

        end if
c
c			MAIN OPTIMIZATION LOOP
c
        small = 1.0E-7
        temp = 1.
        ntot = 0
        nxsavet = 0
        nthin = 0
        ndsavet = 0
        ndct = 0
        nerrt = 0
        ncald = 0
        nupd = 0
        taxist = 0.
        taxist2 = 0.
        tordert = 0.
        tupt = 0.
        tcdt = 0.
        trest = 0.
        tdevt = 0.
        tnat = 0.
        ttfor = 0.
        ns = nsamplei


	do 20 it = 1,itmax+1
c
c						Calculate misfit values
c						for each model in the 
c						current population.
c
           write(*,*)
           write(*,*)' start forward modeling iteration: ',it-1

           t1 = cputime(t2,t3)
	   do 30 i = 1,ns
c						Decode current model
c						and put into array model.
c
              ii = 1+(i-1+ntot)*nd

c             call NA_transform
c    &             (na_models(ii),nd,ranges,scales,na_model)
c
              call transform2raw
     &             (na_models(ii),nd,ranges,scales,na_model)

	      call forward(nd, na_model, misfitval)
c
              jj = ntot + i
	      misfit(jj) = misfitval
c
 30	   continue
           t1 = cputime(t2,t3)
           ttfor = ttfor + t2
           write(*,*)' finished forward modeling'
c
c						Calculate properties of
c						current misfit distribution.
c						(Mean,min,best model etc.)

 	   call NA_misfits
     &          (misfit,ns,it,ntot,mfitmin,
     &           mfitminc,mfitmean,mopt,
     &           shrink,ncells,work_NA5,iwork_NA4,iwork_NA5,mbfit)

c						copy optimum model from
c						current population, to
c						array model_opt.
c
           ii = 1 + (mopt-1)*nd
c          call NA_transform
c    &          (na_models(ii),nd,ranges,scales,na_model)
c
           call transform2raw
     &          (na_models(ii),nd,ranges,scales,na_model)

           do j=1,nd
              model_opt(j) = na_model(j)
           end do
c
	   ntot = ntot + ns
           ns = nsample

	   if(it.eq.itmax+1)go to 99
c								     F I/O
c
c						Call main NA routines
c
	   if(monte)then
c						Perform Monte Carlo 
c						search for comparison
c						to NA.
 	      call NA_random
     &             (na_models,nd,rangest,
     &              ntot,nsample,calcmovement)

	   else 
c                                               restart walk from
c                                               chosen model
c             call NA_restart
c    &             (na_models,nd,mopt,xcur,debug,restartNA)

              if(shrink)then
c						generate a new sample using
c						Neighbourhood algorithm
c						(resample version)

      	      call NA_sample
     &             (na_models, ntot, nsample, nd, nsleep, 
     &              ncells, misfit, mbfit, temp, 
     &              rangest, del, naxis, 
     &              check, small, 
     &              errorstop, xcur, restartNA, calcmovement,
     &		    nclean,
     &              iwork_NA1, iwork_NA2, iwork_NA3, 
     &              iwork_NA4, iwork_NA6,
     &              work_NA1, work_NA2, work_NA3, work_NA4, work_NA5)

	      else
c						generate a new sample using
c						Neighbourhood algorithm
c						(pdf version)
c     	      call NA_sample_pdf
c    &             (na_models, ntot, nsample, nd,
c    &              misfit, temp, rankmode, expon, rangest,
c    &              del, naxis, verbose, timing, debug, check,
c    &              small, errorstop, xcur, restartNA, nclean, 
c    &              iwork_NA1, iwork_NA2, iwork_NA3, 
c    &              iwork_NA4, work_NA1, work_NA2, work_NA3, 
c    &              work_NA4, work_NA5)
c
	      end if
c
c						collect info statistics
              nxsavet = nxsavet + nxsave
              ndsavet = ndsavet + ndsave
c	      write(500,*)' ndsave = ',ndsave,' ndsavet = ',ndsavet
              nthin = nthin + ithin
c             acells(it) = cells
              ndct = ndct + ndc
              nerrt = nerrt + nerr
              tordert = tordert + torder
              tupt = tupt + tup
              tcdt = tcdt + tcd
              trest = trest + tres
              tdevt = tdevt + tdev
              taxist = taxist + taxis
c             taxist2 = taxist2 + taxis2
              tnat = tnat + tna

	   end if

c
 20	continue
c
c			FINISHED OPTIMIZATION LOOP
c
 99     continue
c
c							Some statistics
        write(*,*)' Performance statistics'
        write(*,*)' '
c       write(*,*)'Total number of x saves               ',nxsavet
c       write(*,*)'Total number of d saves               ',ndsavet
        write(*,*)'Total number of thin cells            ',nthin
c       write(*,*)'Total number of distances             ',ndct
        write(*,*)'Total number of calls to calc dlist   ',ncald
        write(*,*)'Total number of calls to update dlist ',nupd
        write(lu_sum,*)' Performance statistics'
        write(lu_sum,*)' '
c       write(lu_sum,*)
c    &        'Total number of x saves               ',nxsavet
c       write(lu_sum,*)
c    &        'Total number of d saves               ',ndsavet
        write(lu_sum,*)
     &        'Total number of thin cells            ',nthin
c       write(lu_sum,*)
c    &        'Total number of distances             ',ndct
        write(lu_sum,*)
     &        'Total number of calls to calc dlist   ',ncald
        write(lu_sum,*)
     &        'Total number of calls to update dlist ',nupd
        if(check)then
           NNval=nd*naxis*nsample*itmax
           write(*,*)'Total number of NN values ',nnval
           write(lu_sum,*)'Total number of NN values ',nnval
           write(*,*)'Total number of errors         ',nerrt
           write(lu_sum,*)'Total number of errors         ',nerrt
        end if
c       write(lu_sum,*)
c    &       'Total time for NNorder          ',tordert
        write(lu_sum,*)
     &       'Total time for NAupdate dlist   ',tupt
        write(lu_sum,*)
     &       'Total time for NAcalc dlist     ',tcdt
        write(lu_sum,*)
     &       'Total time for NNaxis           ',taxist
c       write(lu_sum,*)
c    &       'Total time for NNaxis2          ',taxist2
        write(lu_sum,*)
     &       'Total time for NAdeviate        ',tdevt
        write(lu_sum,*)
     &       'Total time for NA_restart       ',trest
        write(lu_sum,*)
     &       'Total time for NA_sample        ',tnat
        write(lu_sum,*)
     &       'Total time for forward modeling ',ttfor
        write(lu_sum,*)
c       if(verbose)then
c          write(lu_sum,*)'Average number of cells per axis ',
c    &                    'for each sample'  
c          write(lu_sum,*)(acells(ii),ii=1,itmax)
c       end if
c       write(*,*)
c    &       'Total time for NNorder          ',tordert
        write(*,*)
     &       'Total time for NAupdate dlist   ',tupt
        write(*,*)
     &       'Total time for NAcalc dlist     ',tcdt
        write(*,*)
     &       'Total time for NNaxis           ',taxist
c       write(*,*)
c    &       'Total time for NNaxis2          ',taxist2
        write(*,*)
     &       'Total time for NAdeviate        ',tdevt
        write(*,*)
     &       'Total time for NA_restart       ',trest
        write(*,*)
     &       'Total time for NA_sample        ',tnat
        write(*,*)
     &       'Total time for forward modeling ',ttfor
        write(*,*)

c						transform all models
c						back to scaled units
	do i=1,ntot
           ii = 1 + (i-1)*nd
           call transform2raw
     &          (na_models(ii),nd,ranges,scales,na_models(ii))
 	end do

	nh = 1
c						call user supplied I/O routine
	call writemodels 
     &       (nd, ntot, na_models, misfit,
     &        nsamplei, nsample, itmax, nh_max, nh, header)
c
c
c                                               write out ensemble of models
c                                               as a direct access file
        lu_nad = 10
	
c						add NA-info to begining
c						of header file
c
	call NA_header
     &       (lu_nad,'na.nad',header,nh_max,nh,nd,
     &        ranges,scales,
     &        nsamplei,nsample,ncells,nh_user)

c
        write(*,*)' Total length of header in (nad) direct ',
     &            ' access model file = ',nh
        write(*,*)
        write(*,*)' Writing direct access file...'
        write(*,*)
c                                               write direct access nad file
 
        call write_nad
     &       (lu_nad,'na.nad',nd,ntot,
     &        nh,nh_user,header,na_models,misfit)

 100    format(/1x,35('-')/
     &          1x,'|',33x,'|'/
     &          1x,'|',5x,'Parameter space search',6x,'|'/,
     &          1x,'|',' using a Neighbourhood Algorithm ','|'/
     &          1x,'|',33x,'|'/
     &          1x,35('-')/)
 
	stop
	end
